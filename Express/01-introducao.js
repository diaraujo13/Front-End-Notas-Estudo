// app object representa a aplicaÃ§Ã£o Express
// Criamos a aplicaÃ§Ã£o Express chamando a funÃ§Ã£o de alto nÃ­vel express(), exportada pelo mÃ³dulo Express

var express = require('express')
var app = express()

// O objeto `app` possui mÃ©todos para

// Â§ Roteamento de requisiÃ§Ãµes HTTP
// Â§ ConfiguraÃ§Ã£o de middleware
// Â§ RenderizaÃ§Ã£o de HTML Views
// Â§ template engine
// Â§ tambÃ©m permite a configuraÃ§Ã£o de como a aplicaÃ§Ã£o se comporta, atravÃ©s de propriedades

// Express Ã© uma framework web para:
// Ã— Routing
// Ã— Middleware

// âˆ† Em sua essÃªncia, podemos defini-la como uma sÃ©rie de funÃ§Ãµes de middleware âˆ†

// â€¢FunÃ§Ãµes Middleware

// SÃ£o funÃ§Ãµes que tÃªm acesso aos objetos que representam a requisiÃ§Ã£o e a resposta e tambÃ©m tem acesso a prÃ³xima funÃ§Ã£o middleware, no ciclo de requisiÃ§Ã£o&&resposta, e tal funÃ§Ã£o Ã© armazenada por uma variÃ¡vel chamada `next`

// FunÃ§Ãµes de middleware executam as seguintes tarefas:
// Ã— executam cÃ³digo
// Ã— aplicam mudanÃ§as nos objetos de request e de response 
// Ã— finaliza o ciclo req/res (caso nÃ£o finalize, chama a next function para passar a  responsabilidade)
// Ã— chama a prÃ³xima funÃ§Ã£o

// ||Tipos de Middleware||
// 1. Application Level
// 2. Router level
// 3. Error handling
// 4. Built-in
// 5. 3rd Party

// 1. 


// ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¶

app.listen(7878, function(err,succ){}) // CRIAR o servidor em si

// 1. Criar a pasta /server
// 2. npm init
// 3. --save express
// 4. Criar um servidor em uma porta especÃ­fica:

app.listen(8080);
ğŸ—¿
5. node server.js //executar o servidor

// ğŸ”€ Assyncronous
// - FunÃ§Ãµes Callback

â–ª app.listen(8080, function(err, suc){})

// â–ª Podem ser usados em vÃ¡rios pontos no cÃ³digo. AssÃ­ncronos permite que varias requisiÃ§Ãµes sejam feitas sem interromper o que o usuÃ¡rio faz.
// âˆš usar .listen no final do arquivo
// âˆš nodemon reinicia o servidor a cada momento que arquivos sofrerem alteraÃ§Ãµes
// .set - Definir o template, precisando de declarar uma template engine atravÃ©s de .engine
// middlewares - .use
// ordem determina quem serÃ¡ chamado primeiro
// bodyParse - require data from front end, jÃ¡ que ele recebe o 'body request' passado no HTTP Request

app.get ( 'myRoute', function...)
// Antes de enviar o usuÃ¡rio Ã  rota que ele pediu, Ã© chamado a funÃ§Ã£o de middleware
// Por exemplo: Quero que somente usuÃ¡rios autorizados possam entrar em tal rota
app.post ("/upload", user.isAuth(), controller.upload())
// Uma funÃ§Ã£o Ã© chamada e entÃ£o a outra, na ordem :)
app.use - toda requisiÃ§Ã£o irÃ¡ ser chamada esse middleware passado no .use
// â˜… Templating
// - Angular e React sÃ£o utilizados em projetos que nÃ£o usam Temaplate Engines
// - Usando .ejs (precisa instalar)
// - Definir a view engine
$app.set('view engine', 'ejs')

// Express irÃ¡ olhar na lista de views
$res.render('home') 

// ğŸ”¸Pode passar, para a view, ainda no metodo render, como um segundo argumento, um objeto contendo uma lista de chaves-valores, que serÃ£o exibidas na view onde forem chamadas. 

<%= chave %>

// No arquivo .ejs essa formataÃ§Ã£o  indicarÃ¡ onde o valor passado pela router ficarÃ¡

// ğŸ”ƒ Loop trhough array com EJS
// Caso, no objeto passado no .send, passamos um array para uma chave, podemos fazer um loop por ela no .ejs e imprimir cada item usando apenas o 'for' normal! Substitua as tags de PHP por .ejs, serÃ¡ a mesma ideia por trÃ¡s.

app = express()

// Passando o mÃ©todo express para a variÃ¡vel app faz com que esta tenha acesso a todos os mÃ©todos do Express
// Representa a aplicaÃ§Ã£o Express

// â˜… Running

$node app.js

// â˜… Specify router for the application
// Primeira coisa a se fazer.
// app.get -- corresponde Ã  uma chamada GET ao nosso `router`

res.send()
res.write()

// â˜… Params Variable
// Ã‰ acessado atravÃ©s do objeto "req" :)
// - VariÃ¡vel Ã© definida, na URL, presente entre : ?
// - Valor da variÃ¡vel Ã© acessado usando req.params


.get("/informacao/:autor_nome?",
function ( req , res ) 
{
   req.params.autor_nome
}


// â˜… 404 Page not found

.get('*')

// ğŸ”… LÃ³gica

// 1. Pegando um objeto. Tal objeto terÃ¡ uma Ãºnica propriedade que serÃ¡ preenchida por um array de valores.

// 2. A maioria da lÃ³gica ocorrerÃ¡ em nosso middleware

// ğŸ”¸ Trabalhando com Json
// criar uma variÃ¡vel que receberÃ¡ o .json para acessar rotas

